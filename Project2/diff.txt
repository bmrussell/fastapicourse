diff --git a/Project2/TodoApp/routers/todos.py b/Project2/TodoApp/routers/todos.py
index ea87463..1759824 100644
--- a/Project2/TodoApp/routers/todos.py
+++ b/Project2/TodoApp/routers/todos.py
@@ -12,44 +12,22 @@ from .auth import get_current_user
 
 templates = Jinja2Templates(directory="TodoApp/templates")
 
-router = APIRouter(prefix='/todos', tags=['todos'])
+router = APIRouter(
+        prefix='/todos', 
+        tags=['todos']
+)
 
 
 # Dependency injection, calls get_db & get_current_user
 db_dependency = Annotated[Session, Depends(get_db)]
 user_dependency = Annotated[dict, Depends(get_current_user)]
 
-
-@router.get("/", status_code=status.HTTP_200_OK)
-async def read_all(user: user_dependency,  db: db_dependency):
-    if user is None:
-        raise HTTPException(status_code=401, detail='Not authenticated.')
-    return db.query(Todos).filter(Todos.owner_id == user.get('id')).all()
-
-
-@router.get("/{todo_id}", status_code=status.HTTP_200_OK)
-async def read_todo_by_id(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):
-    if user is None:
-        raise HTTPException(status_code=401, detail='Not authenticated.')
-
-    todo_model = db.query(Todos)\
-        .filter(Todos.id == todo_id)\
-        .filter(Todos.owner_id == user.get('id'))\
-        .first()  # Will always be one & first because its the PK
-
-    if todo_model is not None:
-        return todo_model
-
-    raise HTTPException(status_code=404, detail='Todo not found.')
-
-
 class TodoRequest(BaseModel):
     title: str = Field(min_length=3)
     description: str = Field(min_length=3, max_length=100)
     priority: int = Field(gt=0, lt=6)
     complete: bool
 
-
 def redirect_to_login():
     redirect_response = RedirectResponse(url="/auth/login-page", status=status.HTTP_302_FOUND)
     redirect_response.delete_cookie(key="access_token")
@@ -57,78 +35,38 @@ def redirect_to_login():
 
 ### Pages #################################################################
 @router.get("/todo-page")
-async def render_todo_page(request: Request, db: db_dependency):
+async def render_todo_page(request: Request,  db: db_dependency):
     try:
         user = await get_current_user(request.cookies.get('access_token'))
         if user is None:
             return redirect_to_login()
         
-        todos = db.query(Todos)\
-        .filter(Todos.owner_id == user.get("id")).all()
+        todos = db.query(Todos).filter(Todos.owner_id == user.get("id")).all()
         
         return templates.TemplateResponse("todo.html", {"request": request, "todos": todos, "user": user})
     except:
         return redirect_to_login()
 
 
-### Endpoints #############################################################
-@router.post("/", status_code=status.HTTP_201_CREATED)
-async def create_todo(user: user_dependency, db: db_dependency, todo_request: TodoRequest):
-    if user is None:
-        raise HTTPException(status_code=401, detail='Not authenticated.')
-
-    todo_model = Todos(**todo_request.model_dump(), owner_id=user.get('id'))
-    db.add(todo_model)
-    db.commit()
-    todo_id = todo_model.id
-    todo_model = db.query(Todos)\
-        .filter(Todos.id == todo_id)\
-        .filter(Todos.owner_id == user.get('id'))\
-        .first()  # Will always be one & first because its the PK
-    
-    if todo_model is not None: 
-        return todo_model
-
-    raise HTTPException(status_code=500, detail='New todo not found.')
-
-@router.put("/{todo_id}", status_code=status.HTTP_204_NO_CONTENT)
-async def read_all(user: user_dependency, db: db_dependency, todo_request: TodoRequest, todo_id: int = Path(gt=0)):
+### Endpoints ###########################    
+@router.get("/", status_code=status.HTTP_200_OK)
+async def read_all(user: user_dependency,  db: db_dependency):
     if user is None:
         raise HTTPException(status_code=401, detail='Not authenticated.')
-
-    
-    todo_model = db.query(Todos)\
-        .filter(Todos.id == todo_id)\
-        .filter(Todos.owner_id == user.get('id'))\
-        .first() # Will always be one & first because its the PK
-        
-    if todo_model is None:
-        raise HTTPException(status_code=404, detail='Todo not found.')
-
-    todo_model.title = todo_request.title
-    todo_model.description = todo_request.description
-    todo_model.priority = todo_request.priority
-    todo_model.complete = todo_request.complete
-
-    db.add(todo_model)
-    db.commit()
+    return db.query(Todos).filter(Todos.owner_id == user.get('id')).all()
 
 
-@router.delete("/{todo_id}", status_code=status.HTTP_204_NO_CONTENT)
+@router.get("/{todo_id}", status_code=status.HTTP_200_OK)
 async def read_todo_by_id(user: user_dependency, db: db_dependency, todo_id: int = Path(gt=0)):
     if user is None:
         raise HTTPException(status_code=401, detail='Not authenticated.')
-    
+
     todo_model = db.query(Todos)\
         .filter(Todos.id == todo_id)\
         .filter(Todos.owner_id == user.get('id'))\
-        .first() # Will always be one & first because its the PK
-    
-    if todo_model is None:
-        raise HTTPException(status_code=404, detail='Todo not found.')
-
-    db.query(Todos).filter(Todos.id == todo_id).delete()
-    db.commit()
+        .first()  # Will always be one & first because its the PK
 
+    if todo_model is not None:
+        return todo_model
 
-# oauth2.py 480
\ No newline at end of file
+    raise HTTPException(status_code=404, detail='Todo not found.')
